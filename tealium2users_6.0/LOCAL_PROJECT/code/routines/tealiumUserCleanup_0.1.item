package routines;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class tealiumUserCleanup {
	
	private static 
	Map<String, List<String>> permissionMap=loadPermissions();

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
    
    /**
     * 
     * {talendTypes} List
     * 
     * {Category} User Defined
     * 
     * {param} List("accounts") input:  The accounts assigned
     * {param} List("permissions") input: The permissions assigned
     */
    public static List<String> getPermList(List<String> accounts, List<String> permissions){
    	Set<String> output=new HashSet<String>();
    	for (String account : accounts) {
    		for (String permission : permissions) {
    			System.out.println("permission="+permission);
				for (String permLine : permissionMap.get(permission)) {
					
					System.out.println("permLine="+permLine);
					output.add(permLine.replace("account_name", account).replace("profile_name", "*"));
				}
			}
			
		}
    	return new ArrayList<>(output);
    }
    
	private static Map<String, List<String>> loadPermissions() {
		// @formatter:off
		List<String> test = new ArrayList<String>();
		List<String> admin = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:edit",
				"tealium:accounts:account_name:profiles:profile_name:read",
				"tealium:accounts:account_name:profiles:profile_name:edit",
				"tealium:accounts:account_name:profiles:*:create", 
				"tealium:accounts:account_name:profiles:profile_name:delete",
				"tealium:accounts:account_name:profiles:profile_name:lock",
				"tealium:accounts:account_name:profiles:profile_name:publish_targets:*:publish",
				"tealium:accounts:account_name:profiles:profile_name:publish_targets:*:create",
				"tealium:accounts:account_name:profiles:profile_name:publish_targets:*:delete",
				"tealium:accounts:account_name:profiles:profile_name:publish_targets:*:lock",
				"tealium:accounts:account_name:profiles:profile_name:templates:*:read",
				"tealium:accounts:account_name:profiles:profile_name:templates:*:edit",
				"tealium:accounts:account_name:profiles:profile_name:templates:*:create",
				"tealium:accounts:account_name:profiles:profile_name:templates:*:delete",
				"tealium:accounts:account_name:profiles:profile_name:templates:*:lock",
				"tealium:accounts:account_name:profiles:profile_name:tag_classes:*:lock",
				"tealium:accounts:account_name:profiles:profile_name:tag_classes:*:tags:*:read",
				"tealium:accounts:account_name:profiles:profile_name:tag_classes:*:tags:*:edit",
				"tealium:accounts:account_name:profiles:profile_name:tag_classes:*:tags:*:create",
				"tealium:accounts:account_name:profiles:profile_name:tag_classes:*:tags:*:delete",
				"tealium:accounts:account_name:profiles:profile_name:tag_classes:*:tags:*:lock",
				"tealium:accounts:account_name:profiles:profile_name:copy", 
				"tealium:accounts:account_name:profiles:profile_name:manage_users"});
		List<String> publishqa = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:profile_name:read",
				"tealium:accounts:account_name:profiles:profile_name:publish_targets:qa:publish"});
		List<String> publishdev =Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:profile_name:read",
				"tealium:accounts:account_name:profiles:profile_name:publish_targets:dev:publish"});
		List<String> publishprod = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:profile_name:read",
				"tealium:accounts:account_name:profiles:profile_name:publish_targets:prod:publish"});
		List<String> archive = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:profile_name:read",
				"tealium:accounts:account_name:profiles:profile_name:archive"});
		List<String> createprofile = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:*:create"});
		List<String> saveprofile = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:profile_name:read",
				"tealium:accounts:account_name:profiles:profile_name:edit"});
		List<String> copy = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read", 
				"tealium:accounts:account_name:profiles:profile_name:read",
				"tealium:accounts:account_name:profiles:profile_name:copy"});
		List<String> manageusers = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:profile_name:read", 
				"tealium:accounts:account_name:profiles:profile_name:manage_users"});
		List<String> managetemplates = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:profile_name:read",
				"tealium:accounts:account_name:profiles:profile_name:templates:*"});
		List<String> readonly = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:profiles:profile_name:read"});
		List<String> manageaudit = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:manageaudit"});
		List<String> manageaccount = Arrays.asList(new String[]{
				"tealium:accounts:account_name:read",
				"tealium:accounts:account_name:edit"});
		List<String> manageSecureLabels = Arrays.asList(new String[]{"tealium:accounts:account_name:profiles:profile_name:secure_labels:edit"});
		List<String> freetrial = Arrays.asList(new String[]{"tealium:accounts:account_name:freetrials"});
		List<String> extensionsjavascript = Arrays.asList(new String[]{"tealium:accounts:account_name:extensions:javascript:edit"});
		Map<String, List<String>> permissionMap=new HashMap<String, List<String>>();
		//@formatter:off 
		permissionMap.put("test", test);
		permissionMap.put("admin", admin);
		permissionMap .put("publishqa", publishqa);
		permissionMap .put("publishdev", publishdev);
		permissionMap .put("publishprod", publishprod);
		permissionMap .put("archive", archive);
		permissionMap.put("copy", copy);
		permissionMap.put("saveprofile", saveprofile);
		permissionMap.put("createprofile", createprofile);
		permissionMap.put("manageusers", manageusers);
		permissionMap.put("managetemplates", managetemplates);
		permissionMap.put("readonly", readonly); // for importing only
		permissionMap.put("manageaudit", manageaudit);
		permissionMap.put("freetrial", freetrial);
		permissionMap.put("extensionsjavascript", extensionsjavascript);
		permissionMap.put("manageSecureLabels", manageSecureLabels);
		permissionMap.put("manageaccount", manageaccount);

		return permissionMap;
	}
}
